name: Python package

on: [ push ]

jobs:
  test-pipeline:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.7 ]

    env:
      AWS_DATABRICKS_HOST: ${{ secrets.AWS_DATABRICKS_HOST }}
      AWS_DATABRICKS_TOKEN: ${{ secrets.AWS_DATABRICKS_TOKEN }}
      AZURE_DATABRICKS_HOST: ${{ secrets.AZURE_DATABRICKS_HOST }}
      AZURE_DATABRICKS_TOKEN: ${{ secrets.AZURE_DATABRICKS_TOKEN }}

    steps:
      - uses: actions/checkout@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        id: cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            ${{ runner.os }}-pip-

      - name: Install pip
        run: |
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          make install-dev-dependencies

      - name: Install package
        run: |
          make install-dev

      - name: Configure profiles
        run: |
          echo "[dbx-dev-aws]" >> ~/.databrickscfg
          echo "host = $AWS_DATABRICKS_HOST" >> ~/.databrickscfg
          echo "token = $AWS_DATABRICKS_TOKEN" >> ~/.databrickscfg
          echo "" >> ~/.databrickscfg
          echo "[dbx-dev-azure]" >> ~/.databrickscfg
          echo "host = $AZURE_DATABRICKS_HOST" >> ~/.databrickscfg
          echo "token = $AZURE_DATABRICKS_TOKEN" >> ~/.databrickscfg

      - name: Run tests
        run:  pytest tests/unit --cov dbx

      - name: Generate artifact
        run: |
          make artifact

      - uses: actions/upload-artifact@v2
        with:
          name: dbx
          path: artifact/

